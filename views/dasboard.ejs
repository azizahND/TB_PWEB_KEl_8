<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <title>Dashboard</title>
  <link href="/styles/dashboard.css" rel="stylesheet" />
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
</head>
<body>
  <div class="nav">
    <ul class="menu">
      <li><a href="#"><img src="/images/unand.jpeg" alt="Logo"></a></li>
      <li><a href="#" class="active">Dashboard</a></li>
    
      <li><a href="#">Umpan Balik</a></li>
      <li><a href="#">Notifikasi</a></li>
      <li><a href="/admin/profil">Profile</a></li>
      <li><a href="/login" style="margin-top: 70px;">Log Out</a></li>
    </ul>
  </div>

  <div class="container">
    <h1>Data Evaluasi</h1>
    <button class="btn" style="margin-left: 790px; margin-bottom: 20px; padding: 8px;" onclick="generateExcel()">Generate File</button>
    <table id="kriteriaTable">
      <thead>
        <tr>
          <th style="text-align: center;">No</th>
          <th style="text-align: center;">Tanggal</th>
          <th style="text-align: center;">Nama Mahasiswa</th>
          <th style="text-align: center;">NIM</th>
          <th style="text-align: center;">Evaluasi</th>
          <th style="text-align: center;">Aksi</th>
        </tr>
      </thead>
      <tbody>
        <% dataEvaluasi.forEach((item, index) => { %>
        <tr data-id="<%= item.id %>">
            <td style="text-align: center;"><%= index + 1 %></td>
            <td><%= item.createdAt.toLocaleDateString() %></td>
            <td><%= item.mahasiswa.nama %></td>
            <td><%= item.mahasiswa.nim %></td>
            <td style="text-align: center;">
              <a href="/admin/hasilEvaluasi/<%= item.id %>">
                <button type="button" class="btn btn-lihat" >Lihat</button>
              </a>
            </td>
            <td style="text-align: center;"><button class="delete-button" onclick="deleteRow(this)">Hapus</button></td>

        </tr>
        <% }) %>
    </tbody>
    </table>
    <button class="btn" onclick="showGrafik()">Grafik Evaluasi</button>
    <div class="hasil" style="display: none;">
      <h2 style="margin-top: 50px;">Grafik Evaluasi</h2>
      <canvas id="evaluationChart"></canvas>
    </div>
  </div>

  <script>
     function deleteRow(button) {
        const row = button.closest('tr');
        const id = row.getAttribute('data-id');

        Swal.fire({
          title: 'Apakah Anda Yakin?',
          text: 'Anda tidak akan bisa mengembalikan data ini!',
          icon: 'warning',
          showCancelButton: true,
          confirmButtonColor: '#3085d6',
          cancelButtonColor: '#d33',
          confirmButtonText: 'Ya, hapus!',
          cancelButtonText: 'Batal'
        }).then((result) => {
          if (result.isConfirmed) {
            fetch(`/admin/dashboard/${id}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
            .then(response => {
                if (response.ok) {
                    row.remove();
                    Swal.fire({
                      icon: 'success',
                      title: 'Sukses',
                      text: 'Data berhasil dihapus'
                    });
                } else {
                    return response.json().then(error => {
                        Swal.fire({
                          icon: 'error',
                          title: 'Oops...',
                          text: 'Gagal menghapus data: ' + error.message
                        });
                    });
                }
            })
            .catch(error => {
                console.error('Error:', error);
                Swal.fire({
                  icon: 'error',
                  title: 'Oops...',
                  text: 'Terjadi kesalahan saat menghapus data'
                });
            });
          }
        });
    }


    function readRow(btn) {
      const row = btn.parentNode.parentNode;
      alert('Reading row: ' + row.rowIndex);
      // Redirect to hasilEvaluasi page
      window.location.href = '/admin/hasilEvaluasi';
    }

    function generateExcel() {
      // Menggunakan fetch untuk memanggil endpoint /generate-excel
      fetch('/admin/dashboard/excel')
        .then(response => response.blob())
        .then(blob => {
          // Membuat URL objek blob untuk file Excel
          const url = window.URL.createObjectURL(new Blob([blob]));

          // Membuat anchor untuk men-download file Excel
          const a = document.createElement('a');
          a.href = url;
          a.download = 'evaluasi-jawaban.xlsx'; // Nama file yang di-download
          document.body.appendChild(a);
          a.click();
          document.body.removeChild(a);
          window.URL.revokeObjectURL(url);
        })
        .catch(error => console.error('Error generating Excel:', error));
    }

    function showGrafik() {
      fetch('/admin/dashboard/data')
    .then(response => response.json())
    .then(data => {
      const labels = Object.keys(data).map(label => truncateText(label, 30)); // Batasi teks hingga 30 karakter

      // Definisikan warna untuk setiap jawaban
      const colorMap = {
        1: '#DBE7C9',
        2: '#789461',
        3: '#50623A',
        4: '#294B29',
        5: 'green'
      };

      // Mengambil semua nilai jawaban yang mungkin
      const allAnswers = [1, 2, 3, 4, 5]; // Sesuaikan dengan nilai jawaban yang mungkin

      const datasets = allAnswers.map(answer => ({
        label: `Rate ${answer}`,
        data: labels.map((label, index) => data[Object.keys(data)[index]][answer] || 0),
        backgroundColor: colorMap[answer] || '#FCDC2A',
        borderColor: 'rgba(75, 192, 192, 1)',
        borderWidth: 1
      }));

      const ctx = document.getElementById('evaluationChart').getContext('2d');
      new Chart(ctx, {
        type: 'bar',
        data: {
          labels: labels,
          datasets: datasets
        },
        options: {
          scales: {
            y: {
              beginAtZero: true
            }
          },
          plugins: {
            tooltip: {
              callbacks: {
                title: function(context) {
                  // Menampilkan teks lengkap pada tooltip
                  return Object.keys(data)[context[0].dataIndex];
                }
              }
            }
          }
        }
      });

      document.querySelector('.hasil').style.display = 'block';
    })
    .catch(error => console.error('Error fetching evaluation data:', error));
}

// Fungsi untuk memotong teks dan menambahkan elipsis
function truncateText(text, maxLength) {
  if (text.length > maxLength) {
    return text.slice(0, maxLength) + '...';
  }
  return text;
}


  </script>
  
</body>
</html>
